echo "import numpy as np"
echo "from collections import defaultdict"
echo ""


objdump --start-address=0x45b17c --stop-address=0x46217c -D ../whitebox | awk '/movb/ {print $10}' | cut -c 2- | awk 'BEGIN {FS=",";print "tables = [\n[";ORS=", "} {if (NR > 1 && NR%256==1) {ORS="";print "],\n[";ORS=", "}; if (NR>1 && NR%16==1) {print "\n"$1} else {print $1}} END {ORS="\n"; print "]\n]"}'


# Principle:
# I suspect this set of 16 8bit -> 8bit tables (4096 values) corresponds to SBOX[k9_i ^ s_i] ^ k10_i, i being the considered index
# The idea is to eliminate k10_i by considering two inputs and their outputs:
# out_0 = SBOX[k9_i ^ in_0] ^ k10_i
# out_1 = SBOX[k9_i ^ in_1] ^ k10_i
# out_0 ^ out_1 = SBOX[k9_i ^ in_0] ^ SBOX[k9_i ^ in_1]
#
# We have out_k = tables[i][in_k] so it is fast to determine k9_i

echo ""
echo "tries = 10"
echo "AES_SBOX = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]"
echo ""
echo "penultimate = \"\""
echo "for t in range(16):"
echo "  good_hyps = defaultdict(int)"
echo "  for k in range(256):"
echo "    for m1 in np.random.randint(0, 256, tries):"
echo "      m2 = np.random.randint(256)"
echo "      if AES_SBOX[k^m1] ^ AES_SBOX[k^m2] == tables[t][m1] ^ tables[t][m2]:"
echo "        good_hyps[k] += 1"
echo ""
echo "  for k in good_hyps.keys():"
echo "    if good_hyps[k] == tries:"
echo "        penultimate += \"%02X\" % k"
echo ""
echo "print \"Extracted penultimate roundkey:\", penultimate"




# However, the previous method yields a wrong k9
# Let's suppose we are actually dealing with:
# out_k = modified_SBOX[modified_k9_i ^ in_k] ^ k10_i
#
# The ouput of modified_SBOX, however, is in line with the normal SBOX output: only its input is modified
#
# We should verify for the correct k9_i and k10_i that:
# SBOX[k9_i ^ in] ^ k10_i == tables[i][in]
#
# As we are focusing on the output, we expect to capture both modified_k9 and k10

echo ""
echo "penultimate = \"\""
echo "ultimate = \"\""
echo "for t in range(16):"
echo "  for k_penultimate in range(256):"
echo "    for k_ultimate in range(256):"
echo "      good_hyp = True"
echo "      for m in np.random.permutation(range(256))[:3]:"
echo "        good_hyp &= (AES_SBOX[k_penultimate^m] ^ k_ultimate == tables[t][m])"
echo "      if good_hyp:"
echo "        penultimate += \"%02X\" % k_penultimate"
echo "        ultimate    += \"%02X\" % k_ultimate"
echo "        break"
echo "    if len(penultimate) == 2*t + 2:"
echo "      break"
echo ""
echo "print \"Extracted penultimate roundkey:\", penultimate"
echo "print \"Extracted    ultimate roundkey:\", ultimate"





# echo ""
# echo "print \"Extracting ultimate roundkey:\"",
# echo "ultimate = \"\""
# echo "for t in range(16):"
# echo "  for k1 in range(256):"
# echo "    good_hyps = set(range(256))"
# echo "    for k2 in range(256):"
# echo "      for m in np.random.permutation(range(256))[:3]:"
# echo "        if AES_SBOX[k1^m] ^ k2 != tables[t][m]:"
# echo "          good_hyps -= set([k2])"
# echo "      if len(good_hyps) == 1 and k2 != 254:"
# echo "        break"
# echo "    if len(good_hyps) == 1:"
# echo "      ultimate += \"%02X\" % list(good_hyps)[0]"
# echo "      break"
# echo "  if len(good_hyps) != 1:"
# echo "      ultimate += \"XX\""
# echo ""
# echo "print ultimate"



